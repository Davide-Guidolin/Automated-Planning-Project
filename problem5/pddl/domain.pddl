(define (domain robo-doctor_4)
(:requirements :typing :negative-preconditions :durative-actions)
(:types robot person location box content carrier capacity_number)

(:predicates
    (capacity ?cr - carrier ?cp - capacity_number)
    (capacity_predecessor ?cp_prev - capacity_number ?cp_succ - capacity_number)
    (robot-at ?r - robot ?x - location)
    (carrier-at ?cr - carrier ?x - location)
    (carrier-has ?cr - carrier ?b - box)
    (content-at ?c - content ?x - location)
    (box-at ?b - box ?x - location)
    (box-contains ?b - box ?c - content)
    (person-at ?p - person ?x - location)
    (person-has ?p - person ?c - content)
    (box-full ?b - box)
    (busy ?r - robot)
    )

(:durative-action fill
    :parameters (?r - robot ?b - box ?c - content ?x - location)
    :duration (= ?duration 5)
    :condition (and     (over all(robot-at ?r ?x))
                        (over all(box-at ?b ?x))
                        (over all(content-at ?c ?x))
                        (at start (not(busy ?r)))
                        (at start(not(box-full ?b))))
    :effect (and        (at start(box-full ?b))
                        (at start(busy ?r))
                        (at end (not (busy ?r)))
                        (at end(box-contains ?b ?c))))

(:durative-action load
    :parameters (?r - robot ?x - location ?b - box ?cr - carrier ?cp_prev - capacity_number ?cp_succ - capacity_number)
    :duration (= ?duration 4)
    :condition (and     (over all(robot-at ?r ?x))
                        (at start(box-at ?b ?x))
                        (at start (not(busy ?r)))
                        (over all(capacity_predecessor ?cp_prev ?cp_succ))
                        (at start(capacity ?cr ?cp_succ)))
    :effect (and        (at end(carrier-has ?cr ?b))
                        (at start (busy ?r))
                        (at end(not(busy ?r)))
                        (at start(not(box-at ?b ?x)))
                        (at start(not(capacity ?cr ?cp_succ)))
                        (at start(capacity ?cr ?cp_prev))))

(:durative-action move
    :parameters (?r - robot ?cr - carrier ?x1 - location ?x2 - location)
    :duration (= ?duration 10)
    :condition (and     (at start(not(busy ?r)))
                        (at start(robot-at ?r ?x1))
                        (at start(not(robot-at ?r ?x2)))
                        (at start(carrier-at ?cr ?x1))
                        (at start(not(carrier-at ?cr ?x2))))
    :effect (and        (at start(busy ?r))
                        (at end(not(busy ?r)))
                        (at end(robot-at ?r ?x2))
                        (at start(not(robot-at ?r ?x1)))
                        (at end(carrier-at ?cr ?x2))
                        (at start(not(carrier-at ?cr ?x1)))))


(:durative-action unload
    :parameters (?r - robot ?x - location ?b - box ?cr - carrier ?cp_prev - capacity_number ?cp_succ - capacity_number)
    :duration (= ?duration 2)
    :condition (and     (at end(robot-at ?r ?x))
                        (at end(carrier-at ?cr ?x))
                        (at start(carrier-has ?cr ?b))
                        (over all(capacity_predecessor ?cp_prev ?cp_succ))
                        (at start(capacity ?cr ?cp_prev))
                        )
    :effect (and        (at end(box-at ?b ?x))
                        (at start(capacity ?cr ?cp_succ))
                        (at start(not(capacity ?cr ?cp_prev)))
                        (at start(not(carrier-has ?cr ?b)))))

(:durative-action empty
    :parameters (?r - robot ?x - location ?b - box ?c - content ?p - person)
    :duration (= ?duration 3)
    :condition (and     (over all (robot-at ?r ?x))
                        (over all(box-at ?b ?x))
                        (at start(not(busy ?r)))
                        (at start(box-contains ?b ?c))
                        (over all(person-at ?p ?x)))
    :effect (and        (at start (busy ?r))
                        (at end (not (busy ?r)))
                        (at end(not(box-contains ?b ?c)))
                        (at end(person-has ?p ?c))
                        (at end(not(box-full ?b)))))
)
