INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /workspace/downward/builds/release/bin/translate/translate.py shared/Automated-Planning-Project/problem2/domain.pddl shared/Automated-Planning-Project/problem2/problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.005s wall-clock]
Preparing model... [0.000s CPU, 0.003s wall-clock]
Generated 49 rules.
Computing model... [0.020s CPU, 0.008s wall-clock]
680 relevant atoms
430 auxiliary atoms
1110 final queue length
1806 total queue pushes
Completing instantiation... [0.010s CPU, 0.018s wall-clock]
Instantiating: [0.030s CPU, 0.034s wall-clock]
Computing fact groups...
Finding invariants...
23 initial candidates
Finding invariants: [0.010s CPU, 0.005s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
54 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.020s CPU, 0.020s wall-clock]
240 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
7 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
39 of 61 variables necessary.
0 of 7 mutex groups necessary.
452 of 452 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.004s wall-clock]
Translator variables: 39
Translator derived variables: 0
Translator facts: 121
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 452
Translator axioms: 0
Translator task size: 2984
Translator peak memory: 41232 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.084s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /workspace/downward/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_rhw(reasonable_orders=true),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=0.00244515s, 33964 KB] reading input...
[t=0.00486125s, 34088 KB] done reading input!
[t=0.00719629s, 34352 KB] Initializing landmarks count heuristic...
[t=0.00732542s, 34352 KB] Initializing Exploration...
[t=0.00758158s, 34544 KB] Generating landmarks using the RPG/SAS+ approach
approx. reasonable orders
[t=0.0106389s, 34544 KB] approx. obedient reasonable orders
[t=0.0108114s, 34544 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0128683s, 34544 KB] Landmarks generation time: 0.00569683s
[t=0.0130223s, 34544 KB] Discovered 41 landmarks, of which 12 are disjunctive and 0 are conjunctive.
[t=0.0130605s, 34544 KB] 96 edges
[t=0.0134473s, 34544 KB] Simplifying 936 unary operators... done! [920 unary operators]
[t=0.0143186s, 34544 KB] time to simplify: 0.000961185s
[t=0.014504s, 34544 KB] Initializing additive heuristic...
[t=0.0145625s, 34544 KB] Initializing FF heuristic...
[t=0.0147975s, 34544 KB] Building successor generator...done!
[t=0.0154008s, 34544 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0154427s, 34544 KB] time for successor generation creation: 0.000353453s
[t=0.0154974s, 34544 KB] Variables: 39
[t=0.0155217s, 34544 KB] FactPairs: 121
[t=0.0155434s, 34544 KB] Bytes per state: 8
[t=0.0158391s, 34544 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0160861s, 34544 KB] 11 initial landmarks, 8 goal landmarks
[t=0.0161741s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 30
[t=0.0162038s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0162262s, 34544 KB] g=0, 1 evaluated, 0 expanded
[t=0.0162672s, 34544 KB] Initial heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 30
[t=0.016291s, 34544 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0163336s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 29
[t=0.0163592s, 34544 KB] g=1, 2 evaluated, 1 expanded
[t=0.0165806s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 28
[t=0.0166066s, 34544 KB] g=1, 7 evaluated, 6 expanded
[t=0.0166558s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 27
[t=0.0166804s, 34544 KB] g=2, 8 evaluated, 7 expanded
[t=0.0170089s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0170357s, 34544 KB] g=2, 23 evaluated, 22 expanded
[t=0.0170853s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 26
[t=0.0171102s, 34544 KB] g=3, 24 evaluated, 23 expanded
[t=0.017351s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 25
[t=0.0173779s, 34544 KB] g=4, 35 evaluated, 34 expanded
[t=0.0176105s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0176368s, 34544 KB] g=5, 45 evaluated, 44 expanded
[t=0.0179203s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 24
[t=0.0179459s, 34544 KB] g=7, 56 evaluated, 55 expanded
[t=0.0181148s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0181777s, 34544 KB] g=8, 61 evaluated, 60 expanded
[t=0.0182196s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 23
[t=0.0182636s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0182852s, 34544 KB] g=9, 62 evaluated, 61 expanded
[t=0.0183448s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 22
[t=0.0183896s, 34544 KB] g=10, 63 evaluated, 62 expanded
[t=0.018838s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 21
[t=0.0188646s, 34544 KB] g=13, 83 evaluated, 82 expanded
[t=0.0192676s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 20
[t=0.0192981s, 34544 KB] g=14, 93 evaluated, 92 expanded
[t=0.0195144s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0195599s, 34544 KB] g=15, 102 evaluated, 101 expanded
[t=0.0197768s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 19
[t=0.0198544s, 34544 KB] g=17, 109 evaluated, 108 expanded
[t=0.0201395s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0201828s, 34544 KB] g=16, 117 evaluated, 116 expanded
[t=0.0203533s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 18
[t=0.0203953s, 34544 KB] g=18, 122 evaluated, 121 expanded
[t=0.0207251s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 17
[t=0.02077s, 34544 KB] g=19, 135 evaluated, 134 expanded
[t=0.0211568s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 16
[t=0.0212584s, 34544 KB] g=20, 143 evaluated, 142 expanded
[t=0.0217953s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0219722s, 34544 KB] g=21, 151 evaluated, 150 expanded
[t=0.0224509s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 15
[t=0.0225391s, 34544 KB] g=23, 157 evaluated, 156 expanded
[t=0.0228872s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0229638s, 34544 KB] g=25, 166 evaluated, 165 expanded
[t=0.0231154s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 14
[t=0.0231788s, 34544 KB] g=26, 168 evaluated, 167 expanded
[t=0.0246607s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 13
[t=0.0250023s, 34544 KB] g=28, 222 evaluated, 221 expanded
[t=0.0255346s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0256065s, 34544 KB] g=29, 232 evaluated, 231 expanded
[t=0.0263139s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 12
[t=0.0264266s, 34544 KB] g=31, 245 evaluated, 244 expanded
[t=0.0265969s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 11
[t=0.0266663s, 34544 KB] g=32, 248 evaluated, 247 expanded
[t=0.0271922s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0273112s, 34544 KB] g=30, 258 evaluated, 257 expanded
[t=0.027478s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 10
[t=0.0275038s, 34544 KB] g=35, 262 evaluated, 261 expanded
[t=0.0279221s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 9
[t=0.0279522s, 34544 KB] g=38, 284 evaluated, 283 expanded
[t=0.0284929s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
[t=0.0285573s, 34544 KB] g=41, 312 evaluated, 311 expanded
[t=0.0287359s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 7
[t=0.028765s, 34544 KB] g=42, 316 evaluated, 315 expanded
[t=0.0289023s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.028927s, 34544 KB] g=43, 321 evaluated, 320 expanded
[t=0.0290466s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0290711s, 34544 KB] g=44, 325 evaluated, 324 expanded
[t=0.0299235s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 6
[t=0.0299508s, 34544 KB] g=50, 376 evaluated, 375 expanded
[t=0.0301087s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 5
[t=0.0301777s, 34544 KB] g=51, 381 evaluated, 380 expanded
[t=0.0303648s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0303898s, 34544 KB] g=52, 389 evaluated, 388 expanded
[t=0.0305079s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0305322s, 34544 KB] g=53, 393 evaluated, 392 expanded
[t=0.0309342s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 4
[t=0.03096s, 34544 KB] g=56, 416 evaluated, 415 expanded
[t=0.0310415s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0310789s, 34544 KB] g=58, 418 evaluated, 417 expanded
[t=0.0311912s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.031215s, 34544 KB] g=56, 421 evaluated, 420 expanded
[t=0.0312704s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0313101s, 34544 KB] g=57, 422 evaluated, 421 expanded
[t=0.0313972s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 3
[t=0.0314218s, 34544 KB] g=58, 424 evaluated, 423 expanded
[t=0.0315927s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 2
[t=0.0316178s, 34544 KB] g=60, 431 evaluated, 430 expanded
[t=0.0319062s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0319323s, 34544 KB] g=64, 447 evaluated, 446 expanded
[t=0.0319982s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0320231s, 34544 KB] g=65, 450 evaluated, 449 expanded
[t=0.0320742s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0320985s, 34544 KB] g=66, 452 evaluated, 451 expanded
[t=0.0321333s, 34544 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 1
[t=0.0321574s, 34544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0321787s, 34544 KB] g=67, 453 evaluated, 452 expanded
[t=0.0322291s, 34544 KB] Solution found!
[t=0.0322558s, 34544 KB] Actual search time: 0.0161851s
fill robot1 box1 banana depot (1)
load robot1 depot box1 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc3 (1)
unload robot1 loc3 box1 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc3 depot (1)
load robot1 depot box2 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc3 (1)
empty robot1 loc3 box1 banana person2 (1)
move robot1 carrier1 loc3 depot (1)
unload robot1 depot box2 carrier1 capacity_3 capacity_4 (1)
fill robot1 box2 bendage depot (1)
load robot1 depot box2 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc2 (1)
unload robot1 loc2 box2 carrier1 capacity_3 capacity_4 (1)
empty robot1 loc2 box2 bendage person5 (1)
move robot1 carrier1 loc2 depot (1)
fill robot1 box3 bendage depot (1)
load robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc6 (1)
unload robot1 loc6 box3 carrier1 capacity_3 capacity_4 (1)
empty robot1 loc6 box3 bendage person6 (1)
load robot1 loc6 box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc6 depot (1)
unload robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
fill robot1 box3 hammer depot (1)
load robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc1 (1)
unload robot1 loc1 box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc1 depot (1)
load robot1 depot box4 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc4 (1)
unload robot1 loc4 box4 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc4 loc1 (1)
empty robot1 loc1 box3 hammer person1 (1)
load robot1 loc1 box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc1 depot (1)
unload robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
fill robot1 box3 pizza depot (1)
load robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc4 (1)
load robot1 loc4 box4 carrier1 capacity_2 capacity_3 (1)
move robot1 carrier1 loc4 loc6 (1)
unload robot1 loc6 box3 carrier1 capacity_2 capacity_3 (1)
empty robot1 loc6 box3 pizza person6 (1)
move robot1 carrier1 loc6 depot (1)
unload robot1 depot box4 carrier1 capacity_3 capacity_4 (1)
fill robot1 box4 hammer depot (1)
load robot1 depot box4 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc4 (1)
unload robot1 loc4 box4 carrier1 capacity_3 capacity_4 (1)
empty robot1 loc4 box4 hammer person3 (1)
load robot1 loc4 box4 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc4 depot (1)
unload robot1 depot box4 carrier1 capacity_3 capacity_4 (1)
fill robot1 box4 xanax depot (1)
load robot1 depot box4 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc4 (1)
unload robot1 loc4 box4 carrier1 capacity_3 capacity_4 (1)
empty robot1 loc4 box4 xanax person3 (1)
move robot1 carrier1 loc4 loc6 (1)
load robot1 loc6 box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 loc6 depot (1)
unload robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
fill robot1 box3 xanax depot (1)
load robot1 depot box3 carrier1 capacity_3 capacity_4 (1)
move robot1 carrier1 depot loc6 (1)
unload robot1 loc6 box3 carrier1 capacity_3 capacity_4 (1)
empty robot1 loc6 box3 xanax person6 (1)
[t=0.0323122s, 34544 KB] Plan length: 68 step(s).
[t=0.0323122s, 34544 KB] Plan cost: 68
[t=0.0323122s, 34544 KB] Expanded 453 state(s).
[t=0.0323122s, 34544 KB] Reopened 0 state(s).
[t=0.0323122s, 34544 KB] Evaluated 454 state(s).
[t=0.0323122s, 34544 KB] Evaluations: 908
[t=0.0323122s, 34544 KB] Generated 4317 state(s).
[t=0.0323122s, 34544 KB] Dead ends: 0 state(s).
[t=0.0323122s, 34544 KB] Number of registered states: 454
[t=0.0323122s, 34544 KB] Int hash set load factor: 454/512 = 0.886719
[t=0.0323122s, 34544 KB] Int hash set resizes: 9
[t=0.0323122s, 34544 KB] Search time: 0.0164767s
[t=0.0323122s, 34544 KB] Total time: 0.0323122s
Solution found.
Peak memory: 34544 KB
Remove intermediate file output.sas
search exit code: 0

